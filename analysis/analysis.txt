This is the analysis for Markov Part 2, Fall 2018

Matthew Cone, mcc67

(1) Determine (from running Benchmark.java) how long it takes for 
BaseMarkov to generate 2,000, 4,000, 8,000, 16,000, and 32,000 
random characters using the default file and an order 5 Markov Model. 
Include these timings in your report. 
The program also generates 4,096 characters using texts that increase in 
size from 496,768 characters to 4,967,680 characters (10 times the number).  
Do you the timings support the O(NT) analysis for BaseMarkov?
time	source	#chars
0.221	507914	2000
0.427	507914	4000
0.840	507914	8000
1.663	507914	16000
3.333	507914	32000

0.424	507914	4096
0.862	1015828	4096
1.290	1523742	4096
1.713	2031656	4096
2.162	2539570	4096
2.616	3047484	4096
3.090	3555398	4096
3.573	4063312	4096
4.011	4571226	4096
4.470	5079140	4096

The big O for BaseMarkov (O(NT)) is supported by the benchmark test. 
For the character test, the time doubled when the number of characters 
doubled. You can see that the pattern of increase in time shows it 
is being multiplied rather than added like EfficientMarkov. BaseMarkov
does not utilize a hashmap. Instead it loops over every time. This causes
the runtime to double every time the number of characters doubles.


(2) Determine (from running Benchmark.java) how long it takes for 
EfficientMarkov to generate 2,000, 4,000, 8,000, 16,000, and 32,000 
random characters using the default file and an order 5 Markov Model. 
Include these timings in your report. 
The program also generates 4,096 characters using texts that increase in 
size from 496,768 characters to 4,967,680 characters (10 times the number).  
Do you the timings support the O(N+T) analysis for EfficientMarkov?
time	source	#chars
0.150	507914	2000
0.097	507914	4000
0.116	507914	8000
0.115	507914	16000
0.115	507914	32000

0.108	507914	4096
0.195	1015828	4096
0.265	1523742	4096
0.471	2031656	4096
0.521	2539570	4096
0.616	3047484	4096
0.717	3555398	4096
1.244	4063312	4096
2.183	4571226	4096
2.242	5079140	4096

The benchmark test for EfficientMarkov supported O(N+T). The times for 
EfficientMarkov are all the same when the number of characters changes 
because hashmaps are instantaneous. As to be expected, the times for all 
values are quicker than BaseMarkov. Instead of looping over the characters
every time, the hashmap stores the values and causes the runtime to be 
instantaneous no matter how many characters are in the input.

(3)The tests in the class Benchmark use an order-5 Markov Model. 
Run tests that you think are appropriate to determine if the order of the 
Markov Model has a significant impact on the running time for BaseMarkov. 
Explain your reasoning.
I tested order-2 and order-10 for comparison. The smaller order tests executed 
faster than the larger order tests for the character change test; however, the
source code tests proved to be approximately the same runtime for all three of 
the orders used. If your wordgram is higher, the likelihood it finds characters 
proceeding is much lower than if you use a lower order.  